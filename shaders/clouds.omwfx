uniform_float sampling_quality {
    header = "General";
    default = 0.0;
    min = -5.0;
    max = 10.0;
    step = 0.1;
    display_name = "Sampling Quality";
    description = "The sampling quality of cloud raymarching (higher values hurt performance but improve the stability of clouds and mist when in motion, low values are cheaper but may break visuals)";
}

uniform_float scattering_factor {
    default = 1.0;
    min = 0.0;
    max = 5.0;
    step = 0.1;
    display_name = "Rayleigh Scattering";
    description = "Amount of rayleigh scattering applied to light passing through the atmosphere (i.e: increasing this will tint distant objects toward the color of the sky)";
}

uniform_bool replace_skybox {
    header = "Skybox";
    default = true;
    display_name = "Replace Skybox";
    description = "Override the default skybox";
}

uniform_bool better_sun {
    default = true;
    display_name = "Better Sun";
    description = "Render a better sun over the default Morrowind one";
}

uniform_bool clouds_enabled {
    header = "Clouds";
    default = true;
    display_name = "Enabled";
    description = "Enable high-altitude clouds";
}

uniform_bool dynamic_clouds {
    default = true;
    display_name = "Dynamic";
    description = "Enable weather-dependent cloud cover";
}

uniform_float cloud_coverage {
    default = 0.5;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    display_name = "Coverage";
    description = "Multiplier applied on top of weather-based cloud coverage";
}

uniform_float cloud_density {
    default = 0.0;
    min = -10.0;
    max = 10.0;
    step = 0.1;
    display_name = "Density";
    description = "Density of clouds, higher values gives clouds 'sharper' edges";
}

uniform_float cloud_alt {
    default = 75000.0;
    min = 20000.0;
    max = 100000.0;
    step = 1000;
    display_name = "Altitude";
    description = "Average altitude of clouds above the water level";
}

uniform_float cloud_depth {
    default = 120000.0;
    min = 50000.0;
    max = 1000000.0;
    step = 10000;
    display_name = "Depth";
    description = "The depth of the cloud column";
}

uniform_int cloud_detail {
    default = 3;
    min = 0;
    max = 3;
    step = 1;
    display_name = "Detail";
    description = "The amount of detail added to clouds";
}

uniform_float cloud_light_factor {
    default = 0.0;
    min = -0.35;
    max = 0.35;
    step = 0.05;
    display_name = "Lighting";
    description = "Changes the amount of light that clouds are exposed to";
}

uniform_bool mist_enabled {
    header = "Mist";
    default = true;
    display_name = "Enabled";
    description = "Enable low-altitude mist";
}

uniform_bool dynamic_mist {
    default = true;
    display_name = "Dynamic Mist";
    description = "Enable weather-dependent mist";
}

uniform_float mist_density {
    default = 0.5;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    display_name = "Density";
    description = "Density of mist";
}

uniform_float mist_alt {
    default = 1500.0;
    min = 0.0;
    max = 3000.0;
    step = 250;
    display_name = "Altitude";
    description = "Average altitude of mist above the water level";
}

uniform_float mist_speed {
    default = 1;
    min = 0.0;
    max = 5.0;
    step = 0.1;
    display_name = "Speed";
    description = "The speed at which mist mist moves through the world";
}

uniform_bool mist_swirling {
    default = false;
    display_name = "Swirling";
    description = "An additional swirling/turbulent effect to mist (higher sampling quality recommended)";
}

uniform_bool point_glow_enabled {
    header = "Point Glow";
    default = true;
    display_name = "Enabled";
    description = "Enable point glow (a diffuse glowing effect around point lights)";
}

uniform_float point_glow_intensity {
    default = 0.35;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    display_name = "Intensity";
    description = "Intensity of glow around point lights";
}

uniform_float point_glow_min_fade_dist {
    default = 50.0;
    min = 0.0;
    max = 1024.0;
    step = 1.0;
    display_name = "Minimum Fade";
    description = "Minimum distance from the camera that point glow starts to fade in";
}

uniform_float point_glow_max_fade_dist {
    default = 100.0;
    min = 0.0;
    max = 1024.0;
    step = 1.0;
    display_name = "Maximum Fade";
    description = "Distance from the camera that point glow fully fades in";
}

uniform_float point_glow_fade {
    default = 0.2;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    display_name = "Fade Amount";
    description = "How much point glow fades out when close to the camera. Use this to fade out torches/lamps that the player is holding.";
}

uniform_bool point_glow_diffusion {
    default = false;
    display_name = "Cloud & Mist Diffusion";
    description = "Whether mist and clouds should influence point glow (may be expensive)";
}

uniform_float point_glow_min {
    default = 42.0;
    min = 0.0;
    max = 50.0;
    step = 1.0;
    display_name = "Minimum Distance";
    description = "The minimum distance at which point glow has its maximum value";
}

uniform_float point_glow_falloff {
    default = 1.175;
    min = 0.5;
    max = 2.0;
    step = 0.025;
    display_name = "Falloff";
    description = "The exponent used to control point glow falloff/attenuation";
}

uniform_bool clamp_point_glow {
    default = true;
    display_name = "Clamp To Light Radius";
    description = "Whether point glow is clamped to the radius of the light (may reduce artifacts and improve performance)";
}

uniform_bool dithering_enabled {
    header = "Extra";
    default = true;
    display_name = "Dithering";
    description = "Whether dithering is enabled, reducing color banding in dark areas";
}

uniform_bool temporal_dithering {
    default = true;
    display_name = "Temporal Dithering";
    description = "Whether the dithering should be animated. Animated dithering changes each frame, making the dither pattern far less visible";
}

uniform_float dithering_strength {
    default = 256.0;
    min = 1.0;
    max = 256.0;
    step = 1.0;
    display_name = "Dithering Strength";
    description = "Strength of the dithering effect, lower values make the effect stronger. Stronger dithering reduces more banding, but the dithering pattern becomes more visible.";
}

uniform_float interior_mist {
    default = 0.15;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    display_name = "Interior Mist";
    description = "The amount of mist applied to interiors as a result of dusk and other fine diffuse particles";
}

uniform_bool debug {
    header = "Debugging";
    default = false;
    display_name = "Enabled";
    description = "Whether to enable debugging mode";
}

sampler_2d noise {
    source = "textures/noise2.png";
    mag_filter = linear;
    min_filter = linear;
    wrap_s = repeat;
    wrap_t = repeat;
    source_format = red;
    internal_format = red;
    source_type = unsigned_byte;
}

sampler_2d billow_noise {
    source = "textures/noise3.png";
    mag_filter = linear;
    min_filter = linear;
    wrap_s = repeat;
    wrap_t = repeat;
    source_format = red;
    internal_format = red;
    source_type = unsigned_byte;
}

sampler_2d blueNoise {
    source = "textures/blue-noise256.png";
    mag_filter = nearest;
    min_filter = nearest;
    wrap_s = repeat;
    wrap_t = repeat;
}

fragment main {
    omw_In vec2 omw_TexCoord;

    #define HORIZON 100000000.0

    //Array of cloud densities per weather ID
    float cloud_transition(int i) {
        if (i == 0) return 0.2;  //Clear
        if (i == 1) return 0.35; //Cloudy
        if (i == 2) return 0.25;  //Foggy
        if (i == 3) return 0.4;  //Overcast
        if (i == 4) return 0.5;  //Rain
        if (i == 5) return 0.6;  //Thunder
        if (i == 6) return 0.7;  //Ash
        if (i == 7) return 0.7;  //Blight
        if (i == 8) return 0.5;  //Snow
        return 0.6;   //Blizzard
    }

    //Array of mist densities per weather ID
    float mist_transition (int i) {
        if (i == 0) return 0.1;  //Clear
        if (i == 1) return 0.25;  //Cloudy
        if (i == 2) return 0.75;  //Foggy
        if (i == 3) return 0.35;  //Overcast
        if (i == 4) return 0.4;  //Rain
        if (i == 5) return 0.4;  //Thunder
        if (i == 6) return 0.3;  //Ash
        if (i == 7) return 0.2;  //Blight
        if (i == 8) return 0.3;  //Snow
        return 0.4;   //Blizzard
    }

    float dist_at(vec2 uv) {
        float depth = omw_GetDepth(uv);
        mat4 inv = omw.invViewMatrix * omw.invProjectionMatrix;
        vec4 clip_space = vec4((uv * 2.0 - 1.0) * vec2(1.0, 1.0), 1.0 - depth, 1.0);
        vec4 view_space = inv * clip_space;
        return view_space.z / view_space.w;
    }

    vec3 wpos_at(vec2 uv) {
        float depth = omw_GetDepth(uv);
        #if (OMW_REVERSE_Z == 1)
            float flipped_depth = 1.0 - depth;
        #else
            float flipped_depth = depth * 2.0 - 1.0;
        #endif
        vec4 clip_space = vec4(uv * 2.0 - 1.0, flipped_depth, 1.0);
        if (depth == 1.0) {
            vec4 world_space = omw.invViewMatrix * ((omw.invProjectionMatrix * clip_space) * vec4(1.0, 1.0, 1.0, 0.0));
            return normalize(world_space.xyz) * HORIZON;
        } else {
            vec4 world_space = omw.invViewMatrix * (omw.invProjectionMatrix * clip_space);
            return world_space.xyz / world_space.w;
        }
    }

    #define M1 204766743
    #define M2 388370683
    #define M3 396128171

    // Set to 1 if your GPU can't handle bitwise ops
    #define NO_BITWISE 0

    float hash_one(int q) {
#if defined(GL4ES) || NO_BITWISE
        return fract(sin(float(q)) * 43758.5453123);
#else
        int n = ((M3 * q) ^ M2) * M1;
        return float(n) * (1.0 / float(0xffffffffu));
#endif
    }

    float noise_2d(vec2 pos) {
        return omw_Texture2D(noise, pos).x;
    }

    float billow_noise_2d(vec2 pos) {
        return omw_Texture2D(billow_noise, pos).x;
    }

    float noise_3d(vec3 pos) {
        pos.z *= 15.0;
        int z = int(floor(pos.z));
        vec2 offs0 = vec2(hash_one(z), hash_one(z + 73));
        vec2 offs1 = vec2(hash_one(z + 1), hash_one(z + 1 + 73));
        return mix(
            noise_2d(pos.xy + offs0),
            noise_2d(pos.xy + offs1),
            fract(pos.z)
        );
    }

    float billow_noise_3d(vec3 pos) {
        pos.z *= 15.0;
        int z = int(floor(pos.z));
        vec2 offs0 = vec2(hash_one(z), hash_one(z + 73));
        vec2 offs1 = vec2(hash_one(z + 1), hash_one(z + 1 + 73));
        return mix(
            billow_noise_2d(pos.xy + offs0),
            billow_noise_2d(pos.xy + offs1),
            fract(pos.z)
        );
    }

    const float MIN_MIST_DIST = 100.0;
    const float MIN_CLOUD_DIST = 10000.0;

    vec2 fog_at(vec3 wpos, float cull_dist, vec3 dir, in float dyn_clouds, in float dyn_mist) {
        wpos.z = max(wpos.z, 0.0);
        vec3 time = vec3(omw.simulationTime * 0.1, 0.0, 0.0);

        float mist = 0.0;

        if (mist_enabled && cull_dist > MIN_MIST_DIST) {
            float mist_base = omw.waterHeight
                + mist_alt
                + (noise_2d(wpos.xy * 0.000003 + time.xy * 0.03) - 0.6) * 3000.0;
            const float mist_min_height = 4500.0;
            const float mist_max_fade = 500.0;

            if (abs(wpos.z - mist_base) < mist_min_height + mist_max_fade) {
                float swirl = 1.0;
                if (mist_swirling) {
                    wpos.xy += vec2(
                        noise_2d((wpos.xy + wpos.z * 0.1) * 0.0005) - 0.5,
                        noise_2d((wpos.xy + wpos.z * 0.1) * 0.0005) - 0.5
                    ) * 250.0;
                    swirl = (noise_3d((wpos - time * 2500.0 * mist_speed) * (1.0 / 30000.0)) - 0.5) * 3.5 + 1.0;
                }

                float mist_nz = mist_density
                    * dyn_mist
                    * 0.0005
                    * ((noise_2d((wpos.xy - time.x * 2000.0 * mist_speed) * (1.0 / 18000.0)) - 0.5) * 0.5 + 1.0)
                    * swirl;
                float mist_height = mist_min_height + mist_max_fade * dyn_mist; // Causes rising mist

                float hfactor = clamp(1.0 - (wpos.z - mist_base) / mist_height, 0.0, 1.0);
                // pow(_, 5)
                float hfactor2 = hfactor * hfactor;
                hfactor = hfactor2 * hfactor2 * hfactor;

                mist = max(mist_nz, 0.0)
                    * hfactor
                    // Fade out mist if it comes too close
                    * clamp((cull_dist - MIN_MIST_DIST) * (1.0 / MIN_MIST_DIST), 0.0, 1.0);
            }
        }

        float cloud = 0.0;
        float sun_access = 1.0;

        float cloud_base = omw.waterHeight + cloud_alt;
        if (clouds_enabled && cull_dist > MIN_CLOUD_DIST) {
            if (cloud_detail >= 3) { cloud_base += (noise_2d((wpos.xy - time.x * 1000.0) * (1.0 / 800000.0)) - 0.5) * 25000.0; }
            if (abs(wpos.z - cloud_base) < cloud_depth) {
                vec3 sample_wpos = (wpos - vec3(0.0, 0.0, cloud_base)) * vec3(0.55, 0.55, 1.0);
                float cloud_f = noise_3d((sample_wpos + vec3(0.0, 0.0, 5000.0) + time * 15000.0) * (1.0 / 500000.0));
                float cloud_f2 = cloud_f;
                if (cloud_detail >= 2) {
                    cloud_f2 = noise_3d((sample_wpos - vec3(0.0, 0.0, 5000.0) + time * 15000.0) * (1.0 / 500000.0));
                }

                float cloud_large = (cloud_f + cloud_f2) * 0.5
                    - 1.0
                    + dyn_clouds;

                float depth_factor = max(1.0 - abs(wpos.z - cloud_base) / cloud_depth, 0.0);

                if (cloud_large > -0.1 && depth_factor > 0.0) { // Culling
                    float small_nz = 0.0;
                    if (cloud_detail >= 1) { small_nz += billow_noise_3d((wpos - time * 5000.0) * (1.0 / 120000.0)) - 0.5; }
                    if (cloud_detail >= 3) { small_nz += (billow_noise_3d((wpos - time * 10000.0) * (1.0 / 30000.0)) - 0.5) * 0.25; }

                    float cf = max(cloud_large - small_nz * 0.1, 0.0) * 3.0;
                    // pow(_, 5)
                    float cf2 = cf * cf;
                    cf = cf2 * cf2 * cf;
                    float cloud_factor = max(cf, 0.0);
                    cloud = cloud_factor
                        * 0.01
                        * pow(depth_factor, 8.0)
                        // Fade out clouds if they come too close
                        * clamp((cull_dist - MIN_CLOUD_DIST) * (1.0 / MIN_CLOUD_DIST), 0.0, 1.0)
                        * pow(2.0, cloud_density);
                    sun_access = mix(
                        clamp(
                            1.75 + (wpos.z - cloud_base + small_nz * 60000.0) / cloud_depth * 0.25
                            - dyn_clouds * 0.1
                            - dir.z * 0.1
                            - clamp((cloud_f - cloud_f2 + small_nz * 0.23) * 1.5, -0.5, 0.5)
                            - small_nz * small_nz * dyn_clouds * dyn_clouds * 1.25 / (1.0 + cloud_factor * cloud_factor * 500.0)
                            - pow(cloud_factor, 0.03) * 1.0
                            + cloud_light_factor
                            //+ (noise_3d((wpos - time * 10000.0) / 20000.0) - 0.5) * 50.3 * cloud_factor / (1.0 + pow(cloud_factor, 2.0) * 50000.0)
                        , 0.25, 1.0),
                        sun_access,
                        min(mist * 100000.0, 1.0)
                    );
                }
            }
        }

        //float attenuation = 0.00009 / (1.0 + wpos.z / 300.0);

        return vec2(
            mist + cloud,// + attenuation,
            sun_access
        );
    }

    vec3 sun_dir = normalize(omw.sunPos.xyz);

    vec3 sun_color = mix(
        vec3(2.0, 0.5, 0.2) * 3.0,
        vec3(0.6, 0.5, 0.0),
        pow(max(sun_dir.z + 0.2, 0.001), 0.1)
    );

    vec3 weather_tone(int i) {
        if(i == 0) return vec3(0.85);  //Clear
        if(i == 1) return vec3(0.7); //Cloudy
        if(i == 2) return vec3(0.65);  //Foggy
        if(i == 3) return vec3(0.6);  //Overcast
        if(i == 4) return vec3(0.55);  //Rain
        if(i == 5) return vec3(0.5, 0.5, 0.6);  //Thunder
        if(i == 6) return vec3(1.0, 0.5, 0.25);  //Ash
        if(i == 7) return vec3(1.0, 0.5, 0.5);  //Blight
        if(i == 8) return vec3(1.0);   //Snow
        return vec3(1.0);   //Blizzard
    }

    vec3 sky_tone = mix(weather_tone(omw.weatherID), weather_tone(omw.nextWeatherID), omw.weatherTransition);

    vec3 sky_color = mix(
        mix(
            vec3(1.2, 0.4, 0.2),
            vec3(0.01, 0.05, 0.1),
            pow(max(-sun_dir.z + 0.2, 0.001), 0.2)
        ),
        vec3(0.6, 0.8, 1.0),
        sqrt(max(sun_dir.z, 0.001))
    ) * sky_tone;

    float sampling_factor = pow(1.25, sampling_quality);
    float lspace(float wspace) { return log(wspace) * sampling_factor; }
    float wspace(float lspace) { return exp(lspace / sampling_factor); }

    vec4 apply_fog(vec4 col, vec3 wpos, vec3 dir, float max_dist, in float dyn_clouds, in float dyn_mist) {
        float sun_light = pow(max(sun_dir.z + 0.35, 0.0), 1.0) * 1.3;
        float moon_light = max(-sun_dir.z + 0.5, 0.0) * 0.3;
        float direct_light = pow(max(dot(dir, sun_dir), 0.0), 50.0)
            * max(sun_dir.z, 0.0) * 3.0
            // Regulate direct lighting with max_dist to prevent it appearing on top of close objects
            * min(max_dist * (1.0 / 100000.0), 1.0);
        vec3 fog_color = (sun_light + moon_light) * mix(sky_color, sky_tone, max(sun_dir.z, 0.3));

        vec3 fog_light = fog_color + direct_light * sun_color;

        float dist = max_dist;

        // Initial
        //vec2 ifog = fog_at(omw.eyePos.xyz + dir * max_dist, max_dist, dir, dyn_clouds, dyn_mist) * vec2(0.1, 1.0);
        //ifog.x *= pow(abs(dir.z) + 0.3, 2.0) * 0.75;
        //col.rgb = mix(fog_light * ifog.y, col.rgb, pow(0.9999, abs(exp(floor(f) * step_factor) * 20.0 - max_dist) * ifog.x * 10000.0));

        if (debug) {
            if (fract(lspace(dist)) < 0.03) {
                col.rgb = vec3(1.0, step(MIN_MIST_DIST, dist), step(MIN_CLOUD_DIST, dist));
            }
        }

        int i = 0;
        float f = floor(lspace(dist));

        vec3 ispos = omw.eyePos.xyz + dir * dist;
        vec2 ifog = fog_at(ispos, dist, dir, dyn_clouds, dyn_mist);
        //ifog *= 1.0 - abs(fract(lspace(dist)) - 0.5) * 2.0;
        //ifog *= max(abs(dir.z), 0.35);
        const float SCALE_UP_HACK = 20000.0;
        col.rgb = mix(fog_light * ifog.y, col.rgb, pow(0.9999, /*abs(dist - wspace(f))*/ SCALE_UP_HACK * ifog.x * 10000.0 * 0.5 * min(1.0, dist * (1.0 / 10000.0)) /* * pow(1.0 - abs(fract(lspace(dist)) - 0.5) * 2.0, 0.5)*/));

        // Define a minimum sampling distance that is very close for tight spaces, but a more sensible compromise for distant spaces
        float min_lspace = min(lspace(50.0), max_dist * 0.01);

        while (f > min_lspace && i++ < 100) {
            float new_dist = wspace(f);
            float step = dist - new_dist;

            vec3 spos = omw.eyePos.xyz + dir * new_dist;
            vec2 fog = fog_at(spos, dist, dir, dyn_clouds, dyn_mist);

            col.rgb = mix(fog_light * fog.y, col.rgb, pow(0.9999, step * fog.x * 10000.0));
            /*
            float cloud_darken = pow(1.0 / (1.0 + fog.x), step);
            col.rgb =
                // Attenuate light due to clouds
                col.rgb * cloud_darken +
                // Re-add light that's been scattered
                fog_light * fog.y * (1.0 - cloud_darken);
            */

            // Rayleigh scattering
            col.rgb = mix(col.rgb, sky_color, (1.0 - 1.0 / (1.0 + step * 0.00001 * scattering_factor)) * clamp((15000.0 - spos.z) * 0.0001, 0.0, 1.0));

            dist = new_dist;
            f -= 1.0;
        }

        return col;
    }

    vec3 sun_light(vec3 dir) {
        const float frac = 0.003;
        vec3 sun = clamp(pow(max((dot(dir, sun_dir) - (1.0 - frac)) * (1.0 / frac), 0.0001), 10.0), 0.0, 1.0) * sun_color * 50.0;
        vec3 sun_glare = pow(max(dot(dir, sun_dir), 0.0001), 10.0) * sun_color * 0.5;

        return sun + sun_glare;
    }

    float attenuation_strength_real(vec3 rpos) {
        float d2 = rpos.x * rpos.x + rpos.y * rpos.y + rpos.z * rpos.z;
        return 1.0 / (point_glow_min * point_glow_min + pow(d2, point_glow_falloff));
    }

	// Maps a float from an input range to an output range, without clamping
	float map(float value, float min1, float max1, float min2, float max2) {
	  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
	}

    vec3 apply_point_glow(vec3 wpos, vec3 dir, float max_dist, vec3 color, in float dyn_clouds, in float dyn_mist) {
        for (int i = 0; i < omw_GetPointLightCount(); i ++) {
            vec3 light_pos = omw_GetPointLightWorldPos(i);
            // Project light_pos to dir line
            float t = max(dot(light_pos - wpos, dir), 0.0);
            vec3 nearest = wpos + dir * min(t, max_dist);

            vec3 difference = light_pos - nearest;
            float distance_2 = dot(difference, difference);

            if (clamp_point_glow) {
                if (distance_2 > pow(omw_GetPointLightRadius(i), 2.0)) {
                    continue;
                }
            }

            float spread = 0.6;
            if (point_glow_diffusion && !omw.isInterior) {
                spread /= 1.0 + fog_at(light_pos, min(t, max_dist), dir, dyn_clouds, dyn_mist).x * 200.0;
            }

            float strength = pow(attenuation_strength_real(difference), spread)
                * point_glow_intensity
                * max(1.0 - t * 0.0002, 0.0);

			// Fade out point lights that are too close to the camera
			{
				float d2 = distance(omw.eyePos.xyz, light_pos);
				d2 = map(d2, point_glow_min_fade_dist, point_glow_max_fade_dist, point_glow_fade, 1.0);
				d2 = clamp(d2, point_glow_fade, 1.0);
				strength *= d2;
			}

            if (clamp_point_glow) {
                strength *= max(0.0, 1.0 - distance_2 / pow(omw_GetPointLightRadius(i), 2.0));
            }

            vec3 light_color = omw_GetPointLightDiffuse(i) * 100.0 * strength;

            color += light_color;
        }
        return color;
    }

    vec3 rand(vec2 n) {
        return fract(sin(vec3(1.0, 3.0, 7.0) * dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
    }

    void main() {
        vec4 col = omw_Texture2D(omw_SamplerLastShader, omw_TexCoord);

        vec3 wpos = wpos_at(omw_TexCoord);

        float max_dist = distance(omw.eyePos.xyz, wpos);
        vec3 dir = (wpos - omw.eyePos.xyz) / max_dist;

        // Dynamically adjust clouds with weather
        float dyn_clouds = cloud_coverage;
        if (dynamic_clouds) {
            //Adjust cloud according to weatherID
            dyn_clouds *= mix(
                cloud_transition(omw.weatherID),
                cloud_transition(omw.nextWeatherID),
                omw.weatherTransition
            ) * 3.0;
            dyn_clouds = clamp(dyn_clouds, 0.0, 1.0);
        }

        // Dynamically adjust mist with weather
        float dyn_mist = 0.4;
        if (dynamic_mist) {
            //Calc mist based on weather state
            float weather_mist = mix(mist_transition(omw.weatherID), mist_transition(omw.nextWeatherID), omw.weatherTransition);
            //Filter for time of day 5-8 = max mist, blending an hour each side.
            float morning_mist = 1.0-abs(omw.gameHour-clamp(omw.gameHour, 5.0 , 8.0));
            //Which ever is greater wins..
            dyn_mist = max(weather_mist, morning_mist);
        }

		if (omw.isInterior) {
            if (interior_mist > 0.0 && dot(omw.sunColor.rgb, omw.sunColor.rgb) > 0.01) {
                // Slightly attenuate light in interiors
                // TODO: Do proper volumetrics?
                col.rgb = mix(mix(omw.sunColor.rgb, normalize(omw.sunColor.rgb), 0.75) * 0.4, col.rgb, 1.0 / (1.0 + max_dist * 0.005 * interior_mist * interior_mist));
            }
        } else {
			if (max_dist >= HORIZON * 0.9) {
				if (replace_skybox) {
					// Darken the sky above
					col.rgb = sky_color * mix(vec3(0.5, 0.7, 0.9), vec3(1.0), vec3(1.0 - dir.z));
				}
				if (better_sun) {
					col.rgb += sun_light(dir);
				}
			}
            col = apply_fog(col, wpos, dir, max_dist, dyn_clouds, dyn_mist);
        }

        if (point_glow_enabled && point_glow_intensity > 0.0) {
            col.rgb = apply_point_glow(omw.eyePos.xyz, dir, max_dist, col.rgb, dyn_clouds, dyn_mist);
        }

        if (dithering_enabled) {
            vec2 ditherCoord = (omw_TexCoord.xy * omw.resolution) / 256.0; // divide by texture resolution
            if (temporal_dithering)
                ditherCoord += 1337.0*fract(omw.simulationTime);

            float bn = omw_Texture2D(blueNoise, ditherCoord).r; // not masked by the fog, so dithering applies to the full screen. Masking it would require a lot of refactoring, or running fog functions twice.
            float dithering = bn * (1.0 / dithering_strength);
            col.rgb += dithering;
        }

        omw_FragColor = col;
    }
}

technique {
    passes = main;
    version = "0.1";
    description = "Volumetric Clouds";
    author = "zesterer";
    hdr = true;
    flags = disable_underwater, disable_sunglare;
    pass_lights = true;
}
